// import * as THREE from 'three'
// import { shaderMaterial, Center, useTexture, useGLTF } from '@react-three/drei'


// const Scene1 = (props) => {

//     const { nodes } = useGLTF("./models/Level01.glb")
//    const test = useGLTF("./models/spavelvl.glb");
//     const materialTest= useTexture('./models/level1Baked.jpg')
//     materialTest.flipY = false

//     console.log(nodes)
    
//     return <>

//     {/* <mesh geometry={nodes.geometry} >
    
//     <meshBasicMaterial map={ materialTest} />
//     </mesh>
//      */}
    
     


//     <primitive object={test.scene} position={[0 ,0,0]} rotation-y={0} scale={1}/> 

//     </>
// }
// export default Scene1






/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import {
    Stars,
    Environment,
    MeshPortalMaterial,
    
  } from "@react-three/drei";

export default function Scene1(props) {
  const { nodes, materials } = useGLTF("./models/spavelvl.glb");

  const map=useTexture("./textures/2k_stars_milky_way.jpg")

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.cadre.geometry}
        material={materials.gris}
        position={[12.141, 3.304, -6.006]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.image.geometry}
        
        position={[12.141, 3.304, -6.006]}
      >

        <MeshPortalMaterial>
        <ambientLight intensity={1} />
          <Environment preset="sunset" />
          <Stars />
          
            <mesh>
            <sphereGeometry args={[8, 64, 64]} />
           
            <meshStandardMaterial map={map} side={THREE.BackSide} />
            </mesh>
            
        </MeshPortalMaterial>
      </mesh>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        material={materials.test}
        position={[5.375, 2.198, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder.geometry}
        material={nodes.Cylinder.material}
        position={[7.279, 4.12, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.wallShape.geometry}
        material={materials.test}
        position={[-9.547, 13.559, 5.895]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube003.geometry}
        material={nodes.Cube003.material}
        position={[0.043, 36.495, -104.527]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube005.geometry}
        material={materials.test}
        position={[33.412, 17.834, 0]}
      />
      <group position={[-17.909, 0.99, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004.geometry}
          material={materials.blanc}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube004_1.geometry}
          material={materials.test}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane001.geometry}
        material={materials.test}
        position={[1.821, 0.827, 0.866]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane002.geometry}
        material={materials.test}
        position={[0.025, 1.028, 0.878]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane003.geometry}
        material={materials.test}
        position={[-0.929, 1.028, 0.878]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane004.geometry}
        material={materials.test}
        position={[-1.931, 1.028, 0.878]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Plane005.geometry}
        material={materials.test}
        position={[-3.721, 0.827, 0.866]}
        rotation={[Math.PI, -0.011, Math.PI]}
      />
      <group position={[0.043, 0.99, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_1.geometry}
          material={materials.blanc}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube_2.geometry}
          material={materials.test}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/spavelvl.glb");




